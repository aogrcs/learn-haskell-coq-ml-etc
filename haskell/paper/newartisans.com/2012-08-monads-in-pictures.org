#+TITLE:       John Wiegley's "Monads in Pictures"
#+AUTHOR:      Harold Carr
#+DESCRIPTION: John Wiegley's "Monads in Pictures"
#+PROPERTY:    tangle 2012-08-monads-in-pictures.hs
#+OPTIONS:     num:nil toc:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

#+BEGIN_HTML
---
title: John Wiegley's "Monads in Pictures"
tags: haskell, functors, monads, arrows
---
#+END_HTML

# Created       : 2013 Oct 09 (Wed) 13:15:40 by carr.
Last Modified : 2013 Oct 10 (Thu) 14:41:29 by carr.

------------------------------------------------------------------------------
* Intro

- [[http://newartisans.com/2012/08/monads-in-pictures/]]

------------------------------------------------------------------------------
* Functors

A functor is a container where a function can be applied to every
object in the container.

#+BEGIN_SRC haskell
data ExampleContainer a = ExampleContainer [a] deriving (Eq, Show)

instance Functor ExampleContainer where
    fmap f (ExampleContainer x) = ExampleContainer (map f x)
#+END_SRC

#+BEGIN_EXAMPLE
fmap (* 2) $ ExampleContainer [0, 3] -- returns same type
fmap show  $ ExampleContainer [0, 3] -- returns different type
#+END_EXAMPLE

------------------------------------------------------------------------------
* Monads

- [[http://www.haskell.org/haskellwiki/Monads_as_containers]]

A monad is a functor.

#+BEGIN_SRC haskell
data ExampleContainer' a = ExampleContainer' [a] Int deriving (Eq, Show)

ec1 (ExampleContainer' x _) = x
ec2 (ExampleContainer' _ y) = y

instance Functor ExampleContainer' where
    fmap f (ExampleContainer' [] i) =  ExampleContainer' []         (i + 2)
    fmap f (ExampleContainer' xs i) =  ExampleContainer' (map f xs) (i * 2)

instance Monad ExampleContainer' where
    return a = ExampleContainer' [a] 1
--    (>>=) (ExampleContainer' xs i)  f = head (map f xs)
    (>>=) (ExampleContainer' xs i)  f =
        let r = (map f xs)
        in ExampleContainer' (concat $ map (ec1) r) (sum $ map (ec2) r)

foo = do
    x <- (return 1.2) :: ExampleContainer' Double
    let y = return x
      in fmap (*  2) y
#+END_SRC

#+BEGIN_EXAMPLE
fmap (*  2) $ ExampleContainer' [0, 3] 3
fmap (show) $ ExampleContainer' [0, 3] 3
(return 1.2) :: ExampleContainer' Double
ExampleContainer' [1, 2] (-1) >>= \x -> ExampleContainer' [x * 2] (x + 1)
#+END_EXAMPLE

