#+TITLE:     Monads : why should you care?
#+AUTHOR:    [[mailto:harold.carr@gmail.com][harold.carr@gmail.com]] / @haroldcarr / [[http://haroldcarr.com/][haroldcarr.com]]
#+EMAIL:
#+DATE:      http://www.degoesconsulting.com/lambdaconf/ - 2014-04-19
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:

#+startup: oddeven

#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [9pt]
#+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \mode<beamer>{\beamertemplatenavigationsymbolsempty}
#+BEAMER_FRAME_LEVEL: 2
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)
#+latex_header: \setbeamertemplate{navigation symbols}{} %no nav symbols
#+latex_header: \setbeamertemplate{footline}{\hfill \insertpagenumber \enspace}

# ------------------------------------------------------------------------------
* abstract, me, what you will learn

# --------------------------------------------------
** Monads : why should you care?

Most monad explanations
- use analogies like "container" or "context"
- show how monads are implemented
- how they relate to category theory

This presentation shows
- the usefulness of monads---what they can do for you
- (not how they work)

Goal
- provide a glimpse of benefits of monads
- so you can use them in your work
- motivate you to understand how they work on your own

Source of examples: Martin Grabmuller :
- [[http://www.grabmueller.de/martin/www/pub/Transformers.en.html]]

# --------------------------------------------------
** Harold Carr, software architect/developer

- WebLogic InfiniBand Communication at Oracle
- SOAP Web Services Technology at Oracle/Sun
- CORBA/IIOP, RMI-IIOP Technology at Sun
- Visual LISP Technology at Autodesk
- Distributed C++ at University of Utah/HP
- (Concurrent) Utah Scheme, Utah Common Lisp, Portable Standard Lisp at University of Utah/HP
- Logic Simulation at Patel Systems/Cirrus Logic

# Created       : 2013 Oct 10 (Thu) 16:03:42 by carr.
# Last Modified : 2014 Apr 21 (Mon) 22:18:18 by Harold Carr.

# --------------------------------------------------
** what you will learn

*initial intuition*

- a =Monad= is used to pipe the /output/ of one function into another
- a monadic "pipe" has code that executes "behind the scenes"
  - rather than embedded in main lines of program

*monads and side-effects*

- a =Monad= has /nothing/ to do with "real" side-effects
  - e.g., reading/writing a file
- a monadic type is often used to simulate side-effects in a purely functional way
  - aka "effectful"
- the =IO= monad does "real" side-effects

*combining monads*

- use monad "transformers" to combine two or more monads

# ------------------------------------------------------------------------------
* non-monadic evaluator

# --------------------------------------------------
** expression evaluator : types

#+begin_src haskell -n
type Name   = String             -- variable names

data Exp    = Lit  Integer       -- expressions
            | Var  Name
            | Plus Exp  Exp
            | Abs  Name Exp
            | App  Exp  Exp
            deriving (Eq, Show)

data Value  = IntVal Integer      -- values
            | FunVal Env Name Exp
            deriving (Eq, Show)

type Env    = Map.Map Name Value  -- var names to vals
#+end_src

# --------------------------------------------------
** non-monadic evaluator : types/code

#+begin_src haskell -n
eval0                  :: Env -> Exp -> Value


eval0 env (Lit  i)     = IntVal i

eval0 env (Var  n)     = fromJust (Map.lookup n env)

eval0 env (Plus e1 e2) = let IntVal i1 = eval0 env e1
                             IntVal i2 = eval0 env e2
                         in IntVal (i1 + i2)

eval0 env (Abs  n  e)  = FunVal env n e

eval0 env (App  e1 e2) = let v1 = eval0 env e1
                             v2 = eval0 env e2
                         in case v1 of
                              FunVal env' n body ->
                                eval0 (Map.insert n v2 env') body
#+end_src

# --------------------------------------------------
** non-monadic evaluator : in action

#+begin_src haskell -n
-- 12 + (\x -> x) (4 + 2)
exampleExp
=> Plus (Lit 12)
        (App (Abs "x" (Var "x"))
        (Plus (Lit 4) (Lit 2)))

eval0 Map.empty exampleExp
=> IntVal 18

eval0 Map.empty (Plus (Lit 2) (Abs "x" (Lit 1)))
=> IntVal *** Exception: m.hs:59:31-55: Irrefutable pattern failed for pattern Main.IntVal i2

eval0 Map.empty (Var "x")
=> *** Exception: Maybe.fromJust: Nothing
#+end_src

# --------------------------------------------------
** "fixing" unbound variable handling using Either

#+begin_src haskell -n
eval0e                 :: Env -> Exp -> Either String Value

eval0e env (Lit  i)     = Right $ IntVal i

eval0e env (Var  n)     = case Map.lookup n env of
                            Nothing -> Left $ "unbound: " ++ n
                            Just v  -> Right v

eval0e env (Plus e1 e2) = let Right (IntVal i1) = eval0e env e1
                              Right (IntVal i2) = eval0e env e2
                          in Right $ IntVal (i1 + i2)

eval0e env (Abs  n  e)  = Right $ FunVal env n e

eval0e env (App  e1 e2) = let Right v1 = eval0e env e1
                              Right v2 = eval0e env e2
                          in case v1 of
                              FunVal env' n body ->
                                  eval0e (Map.insert n v2 env')
                                         body
#+end_src

# --------------------------------------------------
** unbound Either : in action

#+BEGIN_SRC haskell -n
(eval0e Map.empty (Var "x"))
=> (Left "unbound: x")
#+end_src


# ------------------------------------------------------------------------------
* equivalent monadic evaluator

# --------------------------------------------------
** monadic evaluator : types

#+begin_src haskell -n
type Eval1 alpha  =  Identity alpha

runEval1          :: Eval1 alpha -> alpha
runEval1 ev       =  runIdentity ev

eval1             :: Env -> Exp -> Eval1 Value
#+end_src

# --------------------------------------------------
** monadic evaluator : code

#+begin_src haskell -n
eval1 env (Lit  i)     = return $ IntVal i

eval1 env (Var  n)     = return $ fromJust (Map.lookup n env)

eval1 env (Plus e1 e2) = do IntVal i1 <- eval1 env e1
                            IntVal i2 <- eval1 env e2
                            return $ IntVal (i1 + i2)

eval1 env (Abs  n  e)  = return $ FunVal env n e

eval1 env (App  e1 e2) = do v1 <- eval1 env e1
                            v2 <- eval1 env e2
                            case v1 of
                              FunVal env' n body ->
                               eval1 (Map.insert n v2 env') body
#+end_src

# --------------------------------------------------
** non/monadic evaluator : code side-by-side

#+begin_src haskell -n
Lit : IntVal i                         return $ IntVal i

Var : fromJust (Map.lookup n env)      return $ fromJust (Map.lookup n env)

Plus: let IntVal i1 = eval0 env e1     do IntVal i1 <- eval1 env e1
          IntVal i2 = eval0 env e2        IntVal i2 <- eval1 env e2
      in IntVal (i1 + i2)                 return $ IntVal (i1 + i2)

Abs : FunVal env n e                   return $ FunVal env n e

App : let v1 = eval0 env e1            do v1 <- eval1 env e1
          v2 = eval0 env e2               v2 <- eval1 env e2
      in case v1 of                       case v1 of
          FunVal env' n body ->            FunVal env' n body ->
           eval0 (Map.insert n v2 env')     eval1 (Map.insert n v2 env')
                 body                             body
#+end_src

# --------------------------------------------------
** monadic "bind" evaluator

#+begin_src haskell -n
eval1 env (Lit  i)     = return $ IntVal i

eval1 env (Var  n)     = return $ fromJust (Map.lookup n env)

eval1 env (Plus e1 e2) = eval1 env e1 >>= \dummy ->
                         case dummy of
                           IntVal i1 -> eval1 env e2 >>= \dummy ->
                             case dummy of
                               IntVal i2 -> return $ IntVal (i1 + i2)
                               _         -> fail "pattern match failure"
                           _ -> fail "pattern match failure"

eval1 env (Abs  n  e)  = return $ FunVal env n e

eval1 env (App  e1 e2) = eval1 env e1 >>= \v1 ->
                         eval1 env e2 >>= \v2 ->
                         case v1 of
                           FunVal env' n body ->
                             eval1 (Map.insert n v2 env') body
#+end_src

# --------------------------------------------------
** monadic evaluator : in action

#+begin_src haskell -n
runEval1 (eval1 Map.empty exampleExp)
=> IntVal 18

runEval1 (eval1 Map.empty (Var "x"))
=> *** Exception: Maybe.fromJust: Nothing
#+end_src

# ------------------------------------------------------------------------------
* add unbound variable error handling

# --------------------------------------------------
** unbound variable error handling : types/code

#+begin_src haskell -n
type Eval2 alpha = ErrorT String Identity alpha

runEval2         :: Eval2 alpha -> Either String alpha
runEval2 ev      = runIdentity (runErrorT ev)

eval2a           :: Env -> Exp -> Eval2 Value


eval2a env (Var n)     = case (Map.lookup n env) of
                          Nothing -> fail $ "unbound: " ++ n
                          Just v  -> return v
#+end_src

# --------------------------------------------------
** unbound variable error handling : in action

#+begin_src haskell -n
runEval2 (eval2a Map.empty exampleExp)
=> Right (IntVal 18)

runEval2 (eval2a Map.empty (Var "no-way"))
=> Left "unbound: no-way"

-- type error, but not apparent in error message
runEval2 (eval2a Map.empty (Plus (Lit 12) (Abs "x" (Var "x"))))
=> Left "Pattern match failure in do expression at transformers.hs:138:34-42"
#+end_src

# ------------------------------------------------------------------------------
* handle dynamic type errors

# --------------------------------------------------
** handle dynamic type errors : code

no change in types

#+begin_src haskell -n
eval2b env (Plus e1 e2) = do e1' <- eval2b env e1
                             e2' <- eval2b env e2
                             case (e1', e2') of
                              (IntVal i1, IntVal i2)
                                -> return $ IntVal (i1 + i2)
                              _ -> throwError "dyn type err: Plus"

eval2b env (App e1 e2)  = do v1 <- eval2b env e1
                             v2 <- eval2b env e2
                             case v1 of
                              FunVal env' n body
                                -> eval2b (Map.insert n v2 env') body
                              _ -> throwError "dyn type err: App"
#+end_src

# --------------------------------------------------
** handle dynamic type errors : in action

#+begin_src haskell -n
runEval2 (eval2b Map.empty (Plus (Lit 12) (Abs "x" (Var "x"))))
=> Left "dyn type err: Plus"
#+end_src

# ------------------------------------------------------------------------------
* hide the environment

# --------------------------------------------------
** hide the environment : types

=Env= only
- extended in =App=
- used in =Var= and =Abs=

#+begin_src haskell -n
type Eval3 alpha = ReaderT Env (ErrorT String Identity) alpha

runEval3         :: Env -> Eval3 alpha -> Either String alpha
runEval3 env ev  = runIdentity (runErrorT (runReaderT ev env))

eval3            :: Exp -> Eval3 Value
#+end_src

# --------------------------------------------------
** hide the environment : code

#+begin_src haskell -n
eval3 (Var n)     = do env <- ask
                       case Map.lookup n env of
                        Nothing  -> throwError ("unbound: " ++ n)
                        Just val -> return val

eval3 (Abs n e)   = do env <- ask
                       return $ FunVal env n e

eval3 (App e1 e2) = do v1 <- eval3 e1
                       v2 <- eval3 e2
                       case v1 of
                        FunVal env' n body
                          -> local (const (Map.insert n v2 env'))
                                   (eval3 body)
                        _ -> throwError "dyn type err: App"
#+end_src

# --------------------------------------------------
** hide the environment : in action

#+begin_src haskell -n
runEval3 Map.empty (eval3 exampleExp)
=> Right (IntVal 18)
#+end_src

# ------------------------------------------------------------------------------
* add state (i.e., simulated mutability)

# --------------------------------------------------
** add profiling to interpreter : types

#+begin_src haskell -n
type Eval4 alpha =
     ReaderT Env (ErrorT String (StateT Integer Identity)) alpha

runEval4 :: Env
            -> Integer
            -> Eval4 alpha
            -> (Either String alpha, Integer)
runEval4 env st ev =
         runIdentity (runStateT (runErrorT (runReaderT ev env)) st)

eval4    :: Exp -> Eval4 Value
#+end_src

# --------------------------------------------------
** add profiling to interpreter : code

#+begin_src haskell -n
tick :: (Num s, MonadState s m) => m ()
tick = do st <- get
          put (st + 1)


eval4 (Lit i)     = do tick
                       return $ IntVal i

eval4 (Var n)     = do tick
                       env <- ask
                       ...
#+end_src

# --------------------------------------------------
** add profiling to interpreter : in action

#+begin_src haskell -n
runEval4 Map.empty 0 (eval4 exampleExp)
=> (Right (IntVal 18),8) -- 8 reduction steps
#+end_src

# ------------------------------------------------------------------------------
* add logging

# --------------------------------------------------
** add logging : types

#+begin_src haskell -n
type Eval5 alpha =
     ReaderT Env
             (ErrorT String (WriterT [String]
                                     (StateT Integer Identity)))
             alpha

runEval5 :: Env
            -> Integer
            -> Eval5 alpha
            -> ((Either String alpha, [String]), Integer)
runEval5 env st ev =
         runIdentity (runStateT (runWriterT (runErrorT
                                                (runReaderT ev env)))
                                st)

eval5    :: Exp -> Eval5 Value
#+end_src

# --------------------------------------------------
** add logging : code

#+begin_src haskell -n
eval5 (Var n)     = do tick
                       tell [n] -- write name vars seen during eval
                       env <- ask
                       case Map.lookup n env of
                        Nothing  -> throwError ("unbound: " ++ n)
                        Just val -> return val
#+end_src

# --------------------------------------------------
** add logging : in action

#+begin_src haskell -n
runEval5 Map.empty 0 (eval5 exampleExp)
=> ((Right (IntVal 18),["x"]),8)
#+end_src

# ------------------------------------------------------------------------------
* add IO

# --------------------------------------------------
** add IO : types

#+begin_src haskell -n
type Eval6 alpha =
     ReaderT Env
             (ErrorT String (WriterT [String] (StateT Integer IO)))
             alpha

runEval6 :: Env
            -> Integer
            -> Eval6 alpha
            -> IO ((Either String alpha, [String]), Integer)
runEval6 env st ev =
         runStateT (runWriterT (runErrorT (runReaderT ev env))) st

eval6    :: Exp -> Eval6 Value
#+end_src

# --------------------------------------------------
** add IO : code

#+begin_src haskell -n
eval6 (Lit i)     = do tick
                       liftIO $ print i -- print each int
                       return $ IntVal i
#+end_src

# --------------------------------------------------
** add IO : in action

#+begin_src haskell -n
runEval6 Map.empty 0 (eval6 exampleExp)
12
4
2
=> IO ((Right (IntVal 18),["x"]),8)
#+end_src

# ------------------------------------------------------------------------------
* final version

# --------------------------------------------------
** final version, page 1

#+begin_src haskell -n
eval6 (Lit  i)     = do tick             -- profiling
                        liftIO $ print i -- print each int
                        return $ IntVal i

eval6 (Var  n)     = do tick
                        tell [n]         -- log var
                        env <- ask       -- consult env
                        case Map.lookup n env of
                         Nothing  -> throwError ("unbound: " ++ n)
                         Just val -> return val

eval6 (Plus e1 e2) = do tick
                        e1' <- eval6 e1
                        e2' <- eval6 e2
                        case (e1', e2') of
                         (IntVal i1, IntVal i2)
                           -> return $ IntVal (i1 + i2)
                         _ -> throwError "dyn type err: Plus"
#+end_src

# --------------------------------------------------
** final version, page 2

#+begin_src haskell -n
eval6 (Abs n e)    = do tick
                        env <- ask
                        return $ FunVal env n e

eval6 (App e1 e2)  = do tick
                        v1 <- eval6 e1
                        v2 <- eval6 e2
                        case v1 of
                         FunVal env' n body
                           -> local (const (Map.insert n v2 env'))
                                    (eval6 body)
                         _ -> throwError "dyn type err: App"
#+end_src

# ------------------------------------------------------------------------------
* resources

# --------------------------------------------------
** resources

- interactive version of this presentation at [[https://www.fpcomplete.com/][FPComplete]] :
  - [[https://www.fpcomplete.com/user/haroldcarr/example-of-why-to-use-monads-what-they-can-do]]

- =Maybe=, =Either=, =[]=, =IO= monads (and more to come) :
  - [[http://haroldcarr.com/posts/2014-02-19-monad-series.html]]

- Dan Piponi's :
  - [[http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html]]

- illustrated :
  - [[http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html]]

- Brent Yorgey :
  - [[http://www.haskell.org/haskellwiki/Typeclassopedia]]

- deep dive with Mike Vanier :
  - [[http://mvanier.livejournal.com/3917.html]]

- me
  - [[mailto:harold.carr@gmail.com][harold.carr@gmail.com]] / @haroldcarr / [[http://haroldcarr.com/][haroldcarr.com]]

# End of file.

