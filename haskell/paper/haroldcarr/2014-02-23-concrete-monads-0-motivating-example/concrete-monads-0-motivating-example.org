#+TITLE:       concrete monads 0 : motivating example
#+AUTHOR:      Harold Carr
#+DESCRIPTION: concrete monads 0 : motivating example
#+PROPERTY:    tangle concrete-monads-0-motivating-example.hs
#+OPTIONS:     num:nil toc:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

#+BEGIN_HTML
---
title: concrete monads 0 : motivating example
tags: haskell, monad
---
#+END_HTML

# Created       : 2013 Dec 01 (Sun) 11:18:09 by carr.
Last Modified : 2014 Mar 02 (Sun) 12:59:54 by Harold Carr.

------------------------------------------------------------------------------
* Introduction

This article is part of a [[http://haroldcarr.com/posts/2014-02-19-monad-series.html][series of articles on monads]].

Its purpose is to motivate the /usage/ of monads (not to explain how
they work, nor to explain in details the particular examples shown
here).

This article is a condensed version of [[http://www.cs.virginia.edu/~wh5a/personal/Transformers.lhs]].

This article will show
- monads as a flexible, extensible way structuring of programs
- monads hide book-keeping/plumbing, removing clutter from main algorithm
- using monad transformers (a way to use two or more monads at the same time)

------------------------------------------------------------------------------
** setup

#+BEGIN_SRC haskell
{-# LANGUAGE PackageImports #-}

-- module Transformers where

import           "mtl" Control.Monad.Identity
import           "mtl" Control.Monad.Error
import           "mtl" Control.Monad.Reader
import           "mtl" Control.Monad.State
import           "mtl" Control.Monad.Writer

import                 Data.Maybe
import qualified       Data.Map as Map
#+END_SRC

** unit test

Rather than showing GHCI input/output this article shows test
input/expected results (see [[http://haroldcarr.com/posts/2013-11-07-verified-articles.html][verified articles]]):

#+BEGIN_SRC haskell
import qualified       Test.HUnit      as T
import qualified       Test.HUnit.Util as U
import                 System.IO.Unsafe -- for one unit test
#+END_SRC

------------------------------------------------------------------------------
* non-monadic expression evaluator

An expression evaluator will be used as a running example:

#+BEGIN_SRC haskell
type Name   =  String                -- variable names

data Exp    =  Lit  Integer          -- expressions
            |  Var  Name
            |  Plus Exp  Exp
            |  Abs  Name Exp
            |  App  Exp  Exp
            deriving (Eq, Show)

data Value  =  IntVal Integer        -- values
            |  FunVal Env Name Exp
            deriving (Eq, Show)

type Env    =  Map.Map Name Value    -- from names to values

eval0                 :: Env -> Exp -> Value
eval0 env (Lit i)      = IntVal i
eval0 env (Var n)      = fromJust (Map.lookup n env)
eval0 env (Plus e1 e2) = let  IntVal i1  = eval0 env e1
                              IntVal i2  = eval0 env e2
                         in IntVal (i1 + i2)
eval0 env (Abs  n  e)  = FunVal env n e
eval0 env (App  e1 e2) = let  val1  = eval0 env e1
                              val2  = eval0 env e2
                         in case val1 of
                              FunVal env' n body ->
                                  eval0 (Map.insert n val2 env') body
#+END_SRC

Given the above, evaluating =12 + (\x -> x) (4 + 2)= will result in =18= :

#+BEGIN_SRC haskell
exampleExp = Plus (Lit 12) (App (Abs "x" (Var "x")) (Plus (Lit 4) (Lit 2)))

t00 = U.t "t00"
     (eval0 Map.empty exampleExp)
     (IntVal 18)
#+END_SRC

The above evaluator works fine for the "happy path", but does not give useful
error messages when things go wrong, such as an unbound variable:

#+BEGIN_SRC haskell
t01 = U.e "t01"
     (eval0 Map.empty (Var "x"))
     "Maybe.fromJust: Nothing"
#+END_SRC

That can be "fixed" by using =Either=:

#+BEGIN_SRC haskell
eval0e                 :: Env -> Exp -> Either String Value
eval0e env (Lit  i)     = Right $ IntVal i
eval0e env (Var  n)     = case Map.lookup n env of
                              Nothing -> Left $ "unbound var: " ++ n
                              Just v  -> Right v
eval0e env (Plus e1 e2) = let  Right (IntVal i1)  = eval0e env e1
                               Right (IntVal i2)  = eval0e env e2
                          in Right $ IntVal (i1 + i2)
eval0e env (Abs  n  e)  = Right $ FunVal env n e
eval0e env (App  e1 e2) = let  Right val1  = eval0e env e1
                               Right val2  = eval0e env e2
                          in case val1 of
                              FunVal env' n body ->
                                  eval0e (Map.insert n val2 env') body
#+END_SRC haskell

#+BEGIN_SRC haskell
t0e00 = U.t "t0e00"
     (eval0e Map.empty (Var "x"))
     (Left "unbound var: x")
#+END_SRC

That worked, but the code got ugly fast, adding/removing =Left= and
=Right= all over the place --- and the fix only dealt with unbound
variables, not other problems like a non- =IntVal= given to =Plus=
(shown later).

#+BEGIN_COMMENT
TODO : U.e not handling
   concrete-monads-0-motivating-example.hs:63:32-65: Irrefutable pattern failed for pattern Data.Either.Right (Main.IntVal i2)
t0e01 = U.t "t0e01"
     -- 12 + (\x -> x)
     (eval0e Map.empty (Plus (Lit 12) (Abs "x" (Var "x"))))
     (Right (IntVal 3))
#+END_COMMENT

------------------------------------------------------------------------------
* conversion to monadic structure

A better solution is to write the code in a "monadic" style that makes
it relatively easy to add, remove or change monads.  The monads to be
added will handle error conditions, state, etc., (as will be seen
later).

#+BEGIN_SRC haskell
type Eval1 alpha  =   Identity alpha

runEval1          ::  Eval1 alpha -> alpha
runEval1 ev       =   runIdentity ev

eval1                 :: Env -> Exp -> Eval1 Value
eval1 env (Lit  i)     = return $ IntVal i
eval1 env (Var  n)     = return $ fromJust (Map.lookup n env)
eval1 env (Plus e1 e2) = do  IntVal i1  <- eval1 env e1
                             IntVal i2  <- eval1 env e2
                             return $ IntVal (i1 + i2)
eval1 env (Abs  n  e)  = return $ FunVal env n e
eval1 env (App  e1 e2) = do  val1  <- eval1 env e1
                             val2  <- eval1 env e2
                             case val1 of
                                 FunVal env' n body ->
                                     eval1 (Map.insert n val2 env') body
#+END_SRC

Monadic =eval1= is very similar to non-monadic =eval0=.  The only
difference is the type signature and the addition of =return=, =do=,
and using =<-= instead of =let=.

Again, it is not necessary, in this article, to understand /how/ monads
work in this example.  The point is what various monads can do, which
will be seen below.  In other words, /why/ use monads.

#+BEGIN_COMMENT
For the purposes of this article, it is not necessary to understand
the following details.  The main point is to see the top-level
structure (and later, how that same structure can be leveraged).

Compared to the non-monadic =eval0=, =eval1=
- uses =return= in =Lit=, =Var=, =Plus=, =Abs=
  - =return= "puts" the return value into the proper monad (which monad to use is decided by the compiler)
- uses =do= in =Plus=, =App=
  - =do= enables actions to be sequenced in order and "gets" values from monads (i.e., =IntVal i1 <- eval1 env e1= above)
- uses the =Control.Monad.Identity= monad as "base case" monad around which other monad transformers will be added later
- uses =runIdentity= to get the final =Value= from the =Identity= monad after =eval1= completes

Compared to the non-monadic =eval0e=, =eval1=
- uses the mechanics of monads to put/get things to/from monads (i.e., =Left= / =Right= in =eval0e=)
#+END_COMMENT

=eval1= has the same behavior as =eval0=

#+BEGIN_SRC haskell
t10 = U.t "t10"
     (runEval1 (eval1 Map.empty exampleExp))
     (IntVal 18)

t11 = U.e "t11"
     (runEval1 (eval1 Map.empty (Var "x")))
     "Maybe.fromJust: Nothing"
#+END_SRC

(Note: =runEval1= is used to get the result of =eval1= "out" of the monad.)

The following sections will show how to leverage the monadic structure
of =eval1= to fix problems with the evaluator by changing the type of
the evaluator to use more monads --- all the while using the same
top-level structure of =eval1=.

------------------------------------------------------------------------------
* adding error handling

** unbound variables

Unbound variables are handled with =Either= (as in =eval0e=) but now
the wrapping/unwrapping of =Left= / =Right= is hidden "inside" the
monad definition of =Either= (not shown) rather than cluttering the
program.

=eval2a= is /exactly/ the same as =eval1= except for =Var= handling
and the type signature.  That's the point, the evaluator has become
more powerful without extensive rewriting.  Instead, more monads are
used (i.e., =ErrorT=).

#+BEGIN_SRC haskell
-- String is the type arg to ErrorT : the type of exceptions in example
type Eval2 alpha = ErrorT String Identity alpha

runEval2     :: Eval2 alpha -> Either String alpha
runEval2 ev  = runIdentity (runErrorT ev)

eval2a                 :: Env -> Exp -> Eval2 Value
eval2a env (Lit  i)     = return $ IntVal i

-- eval1 / eval2a diff:
eval2a env (Var  n)     = case Map.lookup n env of
                              Nothing -> fail $ "unbound var: " ++ n
                              Just v  -> return v

eval2a env (Plus e1 e2) = do  IntVal i1  <- eval2a env e1
                              IntVal i2  <- eval2a env e2
                              return $ IntVal (i1 + i2)
eval2a env (Abs  n  e)  = return $ FunVal env n e
eval2a env (App  e1 e2) = do  val1  <- eval2a env e1
                              val2  <- eval2a env e2
                              case val1 of
                                  FunVal env' n body -> eval2a (Map.insert n val2 env') body
#+END_SRC

=eval2a= handles normal evaluation as before but also handles unbound
variables in a more useful manner:

#+BEGIN_SRC haskell
t2a0 = U.t "t2a0"
     (runEval2 (eval2a Map.empty exampleExp))
     (Right (IntVal 18))

t2a1 = U.t "t2a1"
     (runEval2 (eval2a Map.empty (Var "no-way")))
     (Left "unbound var: no-way")
#+END_SRC

** dynamic type errors

An improvement.  But all the evaluators above still give poor error
messages for incorrect dynamic typing:

#+BEGIN_SRC haskell
t2a2 = U.t "t2a2"
     -- 12 + (\x -> x)
     (runEval2 (eval2a Map.empty (Plus (Lit 12) (Abs "x" (Var "x")))))
     (Left "Pattern match failure in do expression at concrete-monads-0-motivating-example.hs:117:31-39")
#+END_SRC

#+BEGIN_COMMENT
TODO: U.e not catching this.
t2a3 = U.e "t2a3"
     -- 12 0
     (runEval2 (eval2a Map.empty (App (Lit 12) (Lit 0))))
     "concrete-monads-0-motivating-example.hs:(127,31)-(128,92): Non-exhaustive patterns in case"
#+END_COMMENT

That is fixed by pattern matching in =Plus= and =App= handling and
explicitly throwing an appropriate error:

#+BEGIN_SRC haskell
eval2b                 :: Env -> Exp -> Eval2 Value
eval2b env (Lit  i)     = return $ IntVal i
eval2b env (Var  n)     = case Map.lookup n env of
                              Nothing -> fail $ "unbound var: " ++ n
                              Just v  -> return v
eval2b env (Plus e1 e2) = do  e1'  <- eval2b env e1
                              e2'  <- eval2b env e2
                              -- eval2a / eval2b diff:
                              case (e1', e2') of
                                  (IntVal i1, IntVal i2) -> return $ IntVal (i1 + i2)
                                  _                      -> throwError "type error in Plus"
eval2b env (Abs  n  e)  = return $ FunVal env n e
eval2b env (App  e1 e2) = do  val1  <- eval2b env e1
                              val2  <- eval2b env e2
                              -- eval2a / eval2b diff:
                              case val1 of
                                  FunVal env' n body -> eval2b (Map.insert n val2 env') body
                                  _                  -> throwError "type error in App"
#+END_SRC

The monadic structure enabled "throwing" the error without the need to
thread that error return throughout the code.  Instead, it is hidden
and handled by the =ErrorT= monad.

#+BEGIN_SRC haskell
t2b0 = U.t "t2b0"
     (runEval2 (eval2b Map.empty (Plus (Lit 12) (Abs "x" (Var "x")))))
     (Left "type error in Plus")

t2b1 = U.t "t2b1"
     (runEval2 (eval2b Map.empty (App (Lit 12) (Lit 0))))
     (Left "type error in App")
#+END_SRC

------------------------------------------------------------------------------
* hiding the environment

The next change hides =Env= (via the =ReaderT= monad) since =Env= is
only extended in =App= and used in =Var= and =Abs=.

Notice how, for each successive evaluator (i.e., =eval1=, =eval2=,
=eval3=), an additional monad is pushed onto the front of the "monad
stack" used in the type of the evaluator.  Likewise, the final value
expression evaluation is obtained by removing each monad layer via
=runIdentity=, =runErrorT=, =runReaderT=.

#+BEGIN_COMMENT
Using =ReaderT=, the =Env= is passed into =eval3=.  It can be read
where needed and extended for nested computations (via =local=).
#+END_COMMENT

#+BEGIN_SRC haskell
type Eval3 alpha = ReaderT Env (ErrorT String Identity) alpha

runEval3     :: Env -> Eval3 alpha -> Either String alpha
runEval3 env ev  = runIdentity (runErrorT (runReaderT ev env))

eval3             :: Exp -> Eval3 Value
eval3 (Lit  i)     = return $ IntVal i
eval3 (Var  n)     = do env <- ask                -- eval2b / eval3 diff
                        case Map.lookup n env of
                            Nothing  -> throwError ("unbound variable: " ++ n)
                            Just val -> return val
eval3 (Plus e1 e2) = do e1'  <- eval3 e1
                        e2'  <- eval3 e2
                        case (e1', e2') of
                            (IntVal i1, IntVal i2) -> return $ IntVal (i1 + i2)
                            _                      -> throwError "type error in Plus"
eval3 (Abs  n  e)  = do env <- ask
                        return $ FunVal env n e
eval3 (App  e1 e2) = do val1  <- eval3 e1
                        val2  <- eval3 e2
                        case val1 of
                                                  -- eval2b / eval3 diff
                            FunVal env' n body -> local (const (Map.insert n val2 env')) (eval3 body)
                            _                  -> throwError "type error in App"
#+END_SRC

#+BEGIN_SRC haskell
t30 = U.t "t30"
     (runEval3 Map.empty (eval3 exampleExp))
     (Right (IntVal 18))
#+END_SRC

In =eval3=, the =ReaderT= =ask= function is used to obtain =Env= in
=Var= and =Abs=, and =local= is used to extend =Env= for the recursive
call to =eval3= in =App=.  (Note: the =local= environment, in this
case, does not depend on the current environment, so =const= is used.)

Again, understanding the exact details mentioned here is not
necessary.  Instead, notice how the code only changed where =Env= is
used.  Nothing else changed (other than the type signature and not
giving =Env= as an explicit parameter to =eval3=).

#+BEGIN_COMMENT
When =ReaderT= added on top of =ErrorT can call =ask= and =local= in =eval3=

But need to call functions of inner monads (e.g., =throwError=) via:

class MonadTrans t where
    lift :: Monad m => m a -> t m a

=lift=
- lifts the return value of a function up by one layer in the monad stack
- sends your command inwards by one layer
- To access =foo= provided three layers down stack: =lift $ lift $ lift $ foo=

Why did call to =throwError= in =eval3= work  without lifting?
- because =ReaderT= is an instance of =MonadError=
- note: =ErrorT= is a =MonadReader= too

mtl programmers made the monad transformers instances of each other (n^2 instances)!

If you need to build a new monad transformer yourself, think carefully
about the design of all the plumbing behind the scene.

But: we must call =MonadIO.liftIO=  in =eval6= because there is no =IO=
class. But only once: do not need to worry about how many times to compose =lift=
#+END_COMMENT

------------------------------------------------------------------------------
* adding state

As an example of state, the evaluator is extended with "profiling" :
an integer counting calls to the evaluator.  The state added is /not/
state like a mutable location in imperative languages.  It is
"effectful" --- meaning updated values are seen after updating but no
locations are mutated.  How that happens is not covered in this
article.

The =StateT= monad is wrapped around the innermost monad =Identity=
(order of =State= and =Error= matters).

#+BEGIN_SRC haskell
type Eval4 alpha = ReaderT Env (ErrorT String (StateT Integer Identity)) alpha

-- returns evaluation result (error or value) and state
-- give initial state arg for flexibility
runEval4            ::  Env -> Integer -> Eval4 alpha -> (Either String alpha, Integer)
runEval4 env st ev  =   runIdentity (runStateT (runErrorT (runReaderT ev env)) st)

-- tick type not same as =Eval4= so it can reused elsewhere.
tick :: (Num s, MonadState s m) => m ()
tick = do  st <- get
           put (st + 1)

-- eval4          :: Exp -> Eval4 Value
eval4 (Lit i)      = do tick
                        return $ IntVal i
eval4 (Var n)      = do tick
                        env <- ask
                        case Map.lookup n env of
                            Nothing -> throwError ("unbound variable: " ++ n)
                            Just val -> return val
eval4 (Plus e1 e2) = do tick
                        e1'  <- eval4 e1
                        e2'  <- eval4 e2
                        case (e1', e2') of
                            (IntVal i1, IntVal i2) ->
                                return $ IntVal (i1 + i2)
                            _ -> throwError "type error in addition"
eval4 (Abs n e)    = do tick
                        env <- ask
                        return $ FunVal env n e
eval4 (App e1 e2)  = do tick
                        val1  <- eval4 e1
                        val2  <- eval4 e2
                        case val1 of
                            FunVal env' n body -> local (const (Map.insert n val2 env')) (eval4 body)
                            _ -> throwError "type error in application"
#+END_SRC

=eval4= is identical to =eval3= (other than the change in type
signature) except each case starts by calling =tick= (and =do= is
added to =Lit=).

#+BEGIN_SRC haskell
t40 = U.t "t40"
     (runEval4 Map.empty 0 (eval4 exampleExp))
     (Right (IntVal 18),8) -- 8 reduction steps
#+END_SRC

#+BEGIN_COMMENT
Note: swap =StateT= and =ErrorT= then instead of:

type Eval4 alpha = ReaderT Env (ErrorT String (StateT Integer Identity)) alpha
runEval4            ::  Env -> Integer -> Eval4 alpha -> (Either String alpha, Integer)
runEval4 env st ev  = runIdentity (runStateT (runErrorT (runReaderT ev env)) st)

we get:

type Eval4' alpha    =   ReaderT Env (StateT Integer (ErrorT String Identity)) alpha
runEval4'           ::  Env -> Integer -> Eval4' alpha -> (Either String (alpha, Integer))
runEval4' env st ev = runIdentity (runErrorT (runStateT (runReaderT ev env) st))

Position of reader monad does not matter, since it does not contribute to the final result.

Note:

=State.gets= applies projection function to state before returning it.
=State.modify= applying function on state

------------------------------------------------------------------------------
-- * return types of examples

=runEval4=
- ignoring =ReaderT= as it does not affect the return value
- peels off =ErrorT= and constructs a value of type =Either String a=
- peels off =StateT= and constructs a pair whose
  - first component is the value being computed
  - second component is the side effect, i.e., the state
- =(Either String a, Integer)=

=runEval4='
- peels off =StateT= and then =ErrorT=
- =Either String (a, Integer)=

See:
- [[http://www.haskell.org/all_about_monads/][All About Monads]]
- [[http://en.wikibooks.org/wiki/Haskell/Monad_transformers][Monad transformers on WikiBooks]]
- [[http://haskell.org/haskellwiki/Category:Monad][Monad on haskell.org]]
- [[http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours][Write Yourself a Scheme in 48 Hours]]

For more category theory stuff, start with
- [[http://en.wikibooks.org/wiki/Haskell/Category_theory][Category theory on WikiBooks]]
- [[http://stefan-klinger.de/files/monadGuide.pdf][The Haskell Programmer's Guide to the IO Monad --- Don't Panic]]
- [[ftp://ftp.cs.wpi.edu/pub/techreports/pdf/03-21.pdf][Monads for Programming Languages]] (pdf)
#+END_COMMENT

------------------------------------------------------------------------------
* adding logging

The evaluator is now extended to collect the name of each variable
encountered during evaluation and return the collection when
evaluation is done.

That is done via the =WriterT= monad.

(=WriterT= is a kind of a dual to =ReaderT=: =WriterT= can add (e.g.,
"write") values to result of computation, whereas =ReaderT= can only
use (e.g., "read") values passed in.)

#+BEGIN_COMMENT
Similar to =StateT=, =WriterT= interacts with =ErrorT= because it produces output.

So depending on order of =ErrorT= and =WriterT=, result will include
the values written out or not when an error occurs.

Type of =WriterT= output values restricted to be a =Monoid=.  Because
class methods used internally to construct initial value and to
combine several values written out.
#+END_COMMENT

#+BEGIN_SRC haskell
type Eval5 alpha = ReaderT Env  (ErrorT String (WriterT [String] (StateT Integer Identity))) alpha

runEval5            ::  Env -> Integer -> Eval5 alpha -> ((Either String alpha, [String]), Integer)
runEval5 env st ev  =   runIdentity (runStateT (runWriterT (runErrorT (runReaderT ev env))) st)

eval5             :: Exp -> Eval5 Value
eval5 (Lit i)      = do tick
                        return $ IntVal i
eval5 (Var n)      = do tick
                        -- eval4 / eval5 diff
                        tell [n] -- collect name of each var encountered during evaluation
                        env <- ask
                        case Map.lookup n env of
                            Nothing  -> throwError ("unbound variable: " ++ n)
                            Just val -> return val
eval5 (Plus e1 e2) = do tick
                        e1'  <- eval5 e1
                        e2'  <- eval5 e2
                        case (e1', e2') of
                            (IntVal i1, IntVal i2) -> return $ IntVal (i1 + i2)
                            _                      -> throwError "type error in addition"
eval5 (Abs n e)     = do tick
                         env <- ask
                         return $ FunVal env n e
eval5 (App e1 e2)   = do tick
                         val1  <- eval5 e1
                         val2  <- eval5 e2
                         case val1 of
                             FunVal env' n body -> local (const (Map.insert n val2 env')) (eval5 body)
                             _                  -> throwError "type error in application"
#+END_SRC

The only change from =eval4= to =eval5= (besides type signature) is
the usage of =tell= in =Var= handling.

#+BEGIN_SRC haskell
t50 = U.t "t50"
      (runEval5 Map.empty 0 (eval5 exampleExp))
      ((Right (IntVal 18),["x"]),8)
#+END_SRC

At first, it may seem like magic that state, logging, etc., can
suddenly be accessed even though they do not seem to appear as
explicit parameters.  The magic is in eval's type signature.  It is a
monad stack that is essentially a data structure (and more) being
passed throughout eval.  Therefore =ask=, =tell=, etc., can access the
appropriate part of the stack when needed.

(Aside: There is some "utility" magic in the monad transformers ([[http://hackage.haskell.org/package/mtl-2.1.2][mtl]]).
Even though there is a stack of monads, and a function such as =ask=
needs to operate on a specific monad in the stack (i.e., =ReaderT=),
the monad transformer implementation "automatically" applies the
function to the appropriate monad in the stack, rather than the main
line code needing to explicitly access the right level.)

------------------------------------------------------------------------------
* IO

The final extension is to add IO to the evaluator: =eval6= will print
the value of each =Lit= encountered during evaluation.

#+BEGIN_COMMENT
Not possible to define an IO monad transformer because IO execution
cannot be arbitrarily nested into other functions or monads.  Only
allowed in the monad =IO=.

mtl provides infrastructure to integrate IO: substitute =IO= for =Identity=

Because =Identity= is base monad, =runIdentity= applied last.

=runEval6= wrapped in =IO= constructor, so does not directly yield
result.  Yields IO computation which must be run to get result.

Also =runIdentity= invocation gone.
#+END_COMMENT

#+BEGIN_SRC haskell
type Eval6 alpha = ReaderT Env  (ErrorT String (WriterT [String] (StateT Integer IO))) alpha

runEval6           ::  Env -> Integer -> Eval6 alpha -> IO ((Either String alpha, [String]), Integer)
runEval6 env st ev  =  runStateT (runWriterT (runErrorT (runReaderT ev env))) st

eval6             :: Exp -> Eval6 Value
eval6 (Lit  i)     = do tick
                        -- eval5 / eval 6 diff
                        -- must use =liftIO= to lift into the currently running monad
                        liftIO $ print i -- print each int when evaluated
                        return $ IntVal i
eval6 (Var  n)     = do tick
                        tell [n]
                        env <- ask
                        case Map.lookup n env of
                            Nothing  -> throwError ("unbound variable: " ++ n)
                            Just val -> return val
eval6 (Plus e1 e2) = do tick
                        e1'  <- eval6 e1
                        e2'  <- eval6 e2
                        case (e1', e2') of
                            (IntVal i1, IntVal i2) -> return $ IntVal (i1 + i2)
                            _                      -> throwError "type error in addition"
eval6 (Abs  n  e)  = do tick
                        env <- ask
                        return $ FunVal env n e
eval6 (App  e1 e2) = do tick
                        val1  <- eval6 e1
                        val2  <- eval6 e2
                        case val1 of
                            FunVal env' n body -> local (const (Map.insert n val2 env')) (eval6 body)
                            _                  -> throwError "type error in application"
#+END_SRC

The only change from =eval5= to =eval6= (besides type signature) is
the usage of =liftIO ...= in =Lit= handling.

#+BEGIN_SRC haskell
t60 = U.t "t60"
      (unsafePerformIO (runEval6 Map.empty 0 (eval6 exampleExp)))
      ((Right (IntVal 18),["x"]),8)
#+END_SRC

------------------------------------------------------------------------------
* summary

The important point to see is that evaluators =eval1= through =eval6=
all have the same structure.  The only change between them is in the
type signature and the usage of specific monad functions (e.g., =ask=,
=tell=) to access data "in" the monad stack.

The mechanics of how state, logging, environment hiding, handling
errors, etc., are weaved through that structure are hidden inside the
monad implementations (rather than cluttering the main program).

Hopefully this article provides a glimpse into the power and
usefulness of monads.

------------------------------------------------------------------------------
* article accuracy

#+BEGIN_SRC haskell
runTests =
    T.runTestTT $ T.TestList $ t00   ++ t01  ++
                               t0e00 ++
                               t10   ++ t11  ++
                               t2a0  ++ t2a1 ++ t2a2 ++
                               t2b0  ++ t2b1 ++
                               t30   ++
                               t40   ++
                               t50   ++ t60
#+END_SRC

#+BEGIN_EXAMPLE
runTests
12
4
2
=> Counts {cases = 14, tried = 14, errors = 0, failures = 0}
#+END_EXAMPLE

(Note: =12=, =4=, =2= are printed to the console from the =eval6= test.)

------------------------------------------------------------------------------
* source code

The emacs org-mode literate source code of this article is available at:

- [[https://github.com/haroldcarr/learn-haskell-coq-ml-etc/blob/master/haskell/paper/haroldcarr/2014-02-23-concrete-monads-0-motivating-example/concrete-monads-0-motivating-example.org]]

# End of file.

