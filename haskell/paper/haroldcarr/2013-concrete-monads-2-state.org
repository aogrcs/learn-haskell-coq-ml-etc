#+TITLE:       concrete monads 2 : Writer, Reader, State
#+AUTHOR:      Harold Carr
#+DESCRIPTION: concrete monads 2 : Writer, Reader, State
#+PROPERTY:    tangle 2013-concrete-monads-2-state.hs
#+OPTIONS:     num:nil toc:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

#+BEGIN_HTML
---
title: concrete monads 2 : Writer, Reader, State
tags: haskell, monad, state
---
#+END_HTML

# Created       : 2013 Oct 10 (Thu) 16:03:42 by carr.
Last Modified : 2013 Dec 14 (Sat) 14:20:26 by carr.

------------------------------------------------------------------------------
* setup

#+BEGIN_SRC haskell
{-# LANGUAGE FlexibleInstances #-}

import Control.Monad.Reader
import Control.Monad.State
import Control.Monad.Writer
import Data.Char
import Data.Either
import Data.Map as Map
import Data.Maybe (fromJust)
import System.IO
#+END_SRC

** unit test

Rather than showing GHCI input/output this article shows test
input/expected results (see [[http://haroldcarr.com/posts/2013-11-07-verified-articles.html][verified articles]]):

#+BEGIN_SRC haskell
import Test.HUnit hiding (State)
import Test.HUnit.Util -- https://github.com/haroldcarr/test-hunit-util
#+END_SRC

------------------------------------------------------------------------------
* =Writer=

The =Writer= =Monad= is useful to enable a function to produce both a regular return value
and auxiliary output which can be "accumulated" function-by-function.   It is
often used for logging.  In the examples below, the auxiliary output is =String=.

- [[http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Writer.html]]

A logging function:

#+BEGIN_SRC haskell
logger fname i o = (fname ++ " " ++ (show i) ++ " = " ++ (show o) ++ "; ")
#+END_SRC

can be used to enable functions to return their normal value and a log of them being called:

#+BEGIN_SRC haskell
half' :: (Integral a, Show a) => a -> (a, String)
half' x = let result = x `div` 2
         in (result, logger "half'" x result)

tw1 = t "tw1"
      (half' 10)
      (5,"half' 10 = 5; ")
#+END_SRC

To make the logs accumulate all calls would have to be changed to something like:

#+BEGIN_SRC haskell
finalValue = (val2, log1 ++ log2)
    where (val1, log1) = half' 10
          (val2, log2) = half' val1

tw2 = t "tw2"
      finalValue
      (2,"half' 10 = 5; half' 5 = 2; ")
#+END_SRC

These kinds of "actions" or "behaviors" are exactly what monads excel at, in this case, the =Writer= =Monad=:

#+BEGIN_EXAMPLE
:i Writer
=> type Writer w = WriterT w Data.Functor.Identity.Identity

:i WriterT
=> newtype WriterT w m a = WriterT {runWriterT :: m (a, w)}

:t runWriter
=> runWriter :: Writer w a -> (a, w)

:t tell
=> tell :: MonadWriter w m => w -> m ()
#+END_EXAMPLE

- [[http://hackage.haskell.org/package/transformers-0.3.0.0/docs/src/Control-Monad-Trans-Writer-Lazy.html#line-124]]

#+BEGIN_EXAMPLE
instance (Monoid w, Monad m) => Monad (WriterT w m) where
    return a = writer (a, mempty)
    m >>= k  = WriterT $ do
        ~(a, w)  <- runWriterT m
        ~(b, w') <- runWriterT (k a)
        return (b, w `mappend` w')
#+END_EXAMPLE

Using the above, the code can be written to have the monad instance
handle the accumulating log and to not have to explicitly pass the
=Writer= around (except in the type signature):

#+BEGIN_SRC haskell
half :: (Integral a, Show a) => a -> Writer String a
half x =
    let result = x `div` 2
    in (tell $ logger "half" x result) >> return result

halfDo :: (Integral a, Show a) => a -> Writer String a
halfDo x = do
    let result = x `div` 2
    tell $ logger "halfDo" x result
    return result

tw3 = t "tw3"
      (runWriter $ half 10)
      (5,"half 10 = 5; ")

tw4 = t "tw4"
      (runWriter $ halfDo 10)
      (5,"halfDo 10 = 5; ")

tw5 = t "tw5"
      (runWriter (halfDo 10 >>= half))
      (2,"halfDo 10 = 5; half 5 = 2; ")
#+END_SRC
------------------------------------------------------------------------------
* =Reader=

The =Reader= =Monad= is useful to enable functions to access the values
held in some enclosing environment without needing to explicitly pass
that environment around.

- [[http://hackage.haskell.org/package/mtl-2.1.2/docs/Control-Monad-Reader.html]]

#+BEGIN_EXAMPLE
:i Reader
=> type Reader r = ReaderT r Data.Functor.Identity.Identity

:i ReaderT
=> newtype ReaderT r m a = ReaderT {runReaderT :: r -> m a}

:t runReader
=> runReader :: Reader r a -> r -> a

:t asks
=> asks :: MonadReader r m => (r -> a) -> m a
#+END_EXAMPLE

- [[http://hackage.haskell.org/package/transformers-0.3.0.0/docs/src/Control-Monad-Trans-Reader.html#line-120]]

#+BEGIN_EXAMPLE
instance (Monad m) => Monad (ReaderT r m) where
    return   = lift . return
    m >>= k  = ReaderT $ \ r -> do
        a <- runReaderT m r
        runReaderT (k a) r
#+END_EXAMPLE

#+BEGIN_SRC haskell
type ExampleConfigInfo = Map String Int;

lookup' :: String -> ExampleConfigInfo -> Int
lookup' name bindings = fromJust (Map.lookup name bindings)

exampleConfig :: String -> Reader ExampleConfigInfo String
exampleConfig x =
    asks (lookup' x) >>= \val ->
    return (x ++ " set to: " ++ (show val))

exampleConfigDo :: String -> Reader ExampleConfigInfo String
exampleConfigDo x = do
    val <- asks (lookup' x)
    return (x ++ " set to: " ++ (show val))

exampleSetup :: Reader ExampleConfigInfo String
exampleSetup =
    exampleConfigDo "mouse"    >>= \c1 ->
    exampleConfigDo "keyboard" >>= \c2 ->
    exampleConfigDo "screen"   >>= \c3 ->
    return $ c1 ++ "; " ++ c2 ++ "; " ++ c3

exampleSetupDo :: Reader ExampleConfigInfo String
exampleSetupDo = do
    c1 <- exampleConfigDo "mouse"
    c2 <- exampleConfigDo "keyboard"
    c3 <- exampleConfigDo "screen"
    return $ c1 ++ "; " ++ c2 ++ "; " ++ c3

exampleConfigInfo = Map.fromList [("mouse",1), ("keyboard",2), ("screen",3)]

tr1 = tt "tr1"
      [ (runReader exampleSetup   $ exampleConfigInfo)
      , (runReader exampleSetupDo $ exampleConfigInfo)
      ]
      "mouse set to: 1; keyboard set to: 2; screen set to: 3"
#+END_SRC

Aside: since this example is returning a =String= that is being used
like a log, it would be useful to combine this use of =Reader= with
=Writer= to handle the logging.

------------------------------------------------------------------------------
* =State=

The =State= =Monad= is like the =Reader= =Monad= except you can write
as well as read.

State can be represented as =(a, s)=, where =a= is result of a
function on a given state and =s= is the new state that results from
evaluating that function.  To maintain state along a pipeline of
functions, the pair resulting at each step is pass to the next
step:

#+BEGIN_SRC haskell
stateExampleNonMonadicExplicitState i f1 f2 =
    case f1 i of
        (c1 ,s1) -> case f2 s1 of
                        (c2, s2) -> (c1:c2:[], s2)

shift (s:ss) = (chr (ord s - 71), ss)
upper (s:ss) = ( toUpper s      , ss)

ts1 = t "ts1"
      (stateExampleNonMonadicExplicitState "hello world" shift upper)
      ("!E","llo world")
#+END_SRC

(Note: in the above example, the type of the result of
=stateExampleNonMonadicExplicitState= is not a state pair like the
state pair used in the rest of the function.  It is a pair that allows
us to see the result of the intermediate evaluations.  Also note that
the structure of this example is similar but not identical to the
examples in ***** TODO ***** .)

Threading the state through the various stages can be avoided using
monads.  The =State= =Monad= type and typeclass instance has several
layers of abstraction.  Rather than showing it now, it is built up
from scratch.

** TODO cite RWH

# --------------------------------------------------

A state-specific version of =>>== is defined as:

#+BEGIN_SRC haskell
bind' ::         (s -> (a, s))   -- leftFun
        -> (a -> (s -> (b, s)))  -- rightFun
        ->       (s -> (b, s))   -- result
bind' leftFun rightFun startState =
    let (leftResult, leftState) = leftFun startState
    in  (rightFun leftResult) leftState
#+END_SRC

(Note: It is called =bind=' because =>>== is called "bind".)

- The =startState= is given to =leftFun=.
  - =leftFun= returns its result and the new state as =(leftResult, leftState)=.
- =rightFun= is given =leftResult= and =leftState=.
  - =rightFun= returns a function from a state to a pair.


#+BEGIN_SRC haskell
return' :: a -> (s -> ( a, s))
return'    a =  \s -> ( a, s)

get'    ::       s -> ( s, s)
get'         =  \s -> ( s, s)

put'    :: s ->  s -> ((), s)
put'       s =  \_ -> ((), s)
#+END_SRC

# -------------------------

#+BEGIN_SRC haskell
stateExample' :: a -> (a -> a -> (a1, a)) -> (a -> a -> (a1, a)) -> ([a1], a)
stateExample' i f1 f2 =
   (get'         `bind'`
    \s0 -> f1 s0 `bind'`
    \r1 -> get'  `bind'`
    \s1 -> f2 s1 `bind'`
    \r2 -> get'  `bind'`
    \s2 -> return' (r1:r2:[]) ) i

shift' :: [Char] -> ([Char] -> (Char, [Char]))
shift' (s:ss) = put' ss `bind'` \_ -> return' $ chr (ord s - 71)

upper' :: [Char] -> ([Char] -> (Char, [Char]))
upper' (s:ss) = put' ss `bind'` \_ -> return' $ toUpper s

ts2 = t "ts2"
      (stateExample' "hello world" shift' upper')
      ("!E","llo world")
#+END_SRC

- [[http://hackage.haskell.org/package/transformers-0.3.0.0/docs/src/Control-Monad-Trans-State-Lazy.html#State]]

#+BEGIN_EXAMPLE
:i State
-- type State s = StateT s Data.Functor.Identity.Identity

:i StateT
-- newtype StateT s m a = StateT {runStateT :: s -> m (a, s)}
-- instance Monad m => Monad (StateT s m)

:i runState
-- runState :: State s a -> s -> (a, s)
#+END_EXAMPLE

- [[http://hackage.haskell.org/package/mtl-2.1.2/docs/src/Control-Monad-State-Class.html#MonadState]]

#+BEGIN_EXAMPLE
class Monad m => MonadState s m | m -> s where
    -- | Return the state from the internals of the monad.
    get :: m s
    get = state (\s -> (s, s))

    -- | Replace the state inside the monad.
    put :: s -> m ()
    put s = state (\_ -> ((), s))

    -- | Embed a simple state action into the monad.
    state :: (s -> (a, s)) -> m a
    state f = do
      s <- get
      let ~(a, s') = f s
      put s'
      return a
#+END_EXAMPLE

#+BEGIN_SRC haskell
stateExampleMonadic   :: String -> (String -> State String Char) -> (String -> State String Char) -> (String, String)
stateExampleMonadic i f1 f2 =
  runState
   (get          >>=
    \s0 -> f1 s0 >>=
    \r1 -> get   >>=
    \s1 -> f2 s1 >>=
    \r2 -> get   >>=
    \s2 -> return (r1:r2:[]) ) i

shiftM :: String -> State String Char
shiftM (s:ss) = put ss >>= \x -> return $ chr (ord s - 71)

upperM :: String -> State String Char
upperM (s:ss) = put ss >>= \x -> return $ toUpper s

ts3 = t "ts3"
      (stateExampleMonadic "hello world" shiftM upperM)
      ("!E","llo world")

stateExampleMonadicDo :: String -> (String -> State String Char) -> (String -> State String Char) -> (String, String)
stateExampleMonadicDo i f1 f2 =
 runState
  (do
    s0 <- get
    r1 <- f1 s0
    s1 <- get
    r2 <- f2 s1
    s2 <- get
    return (r1:r2:[]) ) i

ts4 = t "ts4"
      (stateExampleMonadicDo "hello world" shiftM upperM)
      ("!E","llo world")
#+END_SRC

see:
- [[http://adit.io/posts/2013-06-10-three-useful-monads.html]]
- [[http://monads.haskell.cz/html/index.html]]

diagram:
- http://stackoverflow.com/questions/10230562/confusion-over-the-state-monad-code-on-learn-you-a-haskell

shows >>=
- http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm

expansion of haskell's wikibook state monad page:
- http://xyne.archlinux.ca/notes/haskell/the_state_monad.html

useful:
- http://www.codejury.com/handling-state-with-monads/

monad transformers:
- [[http://blog.sigfpe.com/2006/05/grok-haskell-monad-transformers.html]]


SEE:?
- http://www.haskell.org/haskellwiki/State_Monad
- [[http://brandon.si/code/the-state-monad-a-tutorial-for-the-confused/]]
- http://stackoverflow.com/questions/5310203/how-to-use-instances-of-monad-and-confusion-about
- [[http://embedntks.com/haskells-state-monad/]]

------------------------------------------------------------------------------
* example accuracy

#+BEGIN_SRC haskell
main = do
    runTestTT $ TestList $ tw1 ++ tw2 ++ tw3 ++ tw4 ++ tw5 ++
                           tr1 ++
                           ts1 ++ ts2 ++ ts3 ++ ts4
#+END_SRC

# End of file.


