#+TITLE:     motivation for monads
#+AUTHOR:    Harold Carr

# Created       : 2014 Jan 28 (Tue) 19:09:36 by Harold Carr.
# Last Modified : 2014 Apr 17 (Thu) 15:31:11 by Harold Carr.
#+OPTIONS:     num:nil toc:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

# ------------------------------------------------------------------------------
* Motivation for Monads

# --------------------------------------------------
** example: non-monadic evaluator

#+begin_src haskell
type Name   =  String                -- variable names

data Exp    =  Lit  Integer          -- expressions
            |  Var  Name
            |  Plus Exp  Exp
            |  Abs  Name Exp
            |  App  Exp  Exp
            deriving (Eq, Show)

data Value  =  IntVal Integer        -- values
            |  FunVal Env Name Exp
            deriving (Eq, Show)

type Env    =  Map.Map Name Value    -- mapping from names to values
#+end_src

#+begin_src haskell
eval0                 :: Env -> Exp -> Value
eval0 env (Lit i)      = IntVal i
eval0 env (Var n)      = fromJust (Map.lookup n env)
eval0 env (Plus e1 e2) = let  IntVal i1  = eval0 env e1
                              IntVal i2  = eval0 env e2
                         in IntVal (i1 + i2)
eval0 env (Abs  n  e)  = FunVal env n e
eval0 env (App  e1 e2) = let  val1  = eval0 env e1
                              val2  = eval0 env e2
                         in case val1 of
                              FunVal env' n body ->
                                  eval0 (Map.insert n val2 env') body
#+end_src

#+begin_src haskell
-- 12 + (\x -> x) (4 + 2)
exampleExp
=> Plus (Lit 12) (App (Abs "x" (Var "x")) (Plus (Lit 4) (Lit 2)))

eval0 Map.empty exampleExp
=> IntVal 18

eval0 Map.empty (Plus (Lit 2) (Abs "x" (Lit 1)))
=> IntVal *** Exception: m.hs:59:31-55: Irrefutable pattern failed for pattern Main.IntVal i2

eval0 Map.empty (Var "x")
=> *** Exception: Maybe.fromJust: Nothing
#+end_src

# --------------------------------------------------
** equivalent monadic evaluator

#+begin_src haskell
type Eval1 alpha  =   Identity alpha

runEval1          ::  Eval1 alpha -> alpha
runEval1 ev       =   runIdentity ev

eval1                 :: Env -> Exp -> Eval1 Value
eval1 env (Lit i)      = return $ IntVal i
eval1 env (Var n)      = return $ fromJust (Map.lookup n env)
eval1 env (Plus e1 e2) = do  IntVal i1  <- eval1 env e1
                             IntVal i2  <- eval1 env e2
                             return $ IntVal (i1 + i2)
eval1 env (Abs n e)    = return $ FunVal env n e
eval1 env (App e1 e2)  = do  val1  <- eval1 env e1
                             val2  <- eval1 env e2
                             case val1 of
                                 FunVal env' n body ->
                                     eval1 (Map.insert n val2 env') body
#+end_src

#+begin_src haskell
runEval1 (eval1 Map.empty exampleExp)
=> IntVal 18

runEval1 (eval1 Map.empty (Var "x"))
=> *** Exception: Maybe.fromJust: Nothing
#+end_src

# --------------------------------------------------
** add unbound variable error handling

#+begin_src haskell
type Eval2 alpha = ErrorT String Identity alpha

runEval2     :: Eval2 alpha -> Either String alpha
runEval2 ev  = runIdentity (runErrorT ev)

eval2a                 :: Env -> Exp -> Eval2 Value
eval2a env (Var n)      = case (Map.lookup n env) of
                              Nothing -> fail $ "unbound var: " ++ n
                              Just v  -> return v
#+end_src

#+begin_src haskell
runEval2 (eval2a Map.empty exampleExp)
=> Right (IntVal 18)

runEval2 (eval2a Map.empty (Var "no-way"))
=> Left "unbound var: no-way"

-- type error, but not apparent in error message
runEval2 (eval2a Map.empty (Plus (Lit 12) (Abs "x" (Var "x"))))
=> Left "Pattern match failure in do expression at transformers.hs:138:34-42"
#+end_src

# --------------------------------------------------
** handle type errors

#+begin_src haskell
eval2b env (Plus e1 e2) = do  e1'  <- eval2b env e1
                              e2'  <- eval2b env e2
                              case (e1', e2') of
                                (IntVal i1, IntVal i2)
                                  -> return $ IntVal (i1 + i2)
                                _ -> throwError "type error in Plus"
eval2b env (App e1 e2)  = do  val1  <- eval2b env e1
                              val2  <- eval2b env e2
                              case val1 of
                                  FunVal env' n body
                                    -> eval2b (Map.insert n val2 env') body
                                  _ -> throwError "type error in App"
#+end_src

#+begin_src haskell
runEval2 (eval2b Map.empty (Plus (Lit 12) (Abs "x" (Var "x"))))
=> Left "type error in Plus"
#+end_src

# --------------------------------------------------
** hide the environment

=Env= only
- extended in =App=
- used in =Var= and =Abs=

#+begin_src haskell
type Eval3 alpha = ReaderT Env (ErrorT String Identity) alpha

runEval3     :: Env -> Eval3 alpha -> Either String alpha
runEval3 env ev  = runIdentity (runErrorT (runReaderT ev env))

eval3             :: Exp -> Eval3 Value
eval3 (Var n)      = do env <- ask
                        case Map.lookup n env of
                          Nothing  -> throwError ("unbound var: " ++ n)
                          Just val -> return val
eval3 (Abs n e)    = do env <- ask
                        return $ FunVal env n e
eval3 (App e1 e2)  = do val1  <- eval3 e1
                        val2  <- eval3 e2
                        case val1 of
                          FunVal env' n body
                             -> local (const (Map.insert n val2 env'))
                                      (eval3 body)
                          _  -> throwError "type error in application"
#+end_src

#+begin_src haskell
runEval3 Map.empty (eval3 exampleExp)
=> Right (IntVal 18)
#+end_src

# --------------------------------------------------
** add state (simulated mutability)

add profiling to interpreter

#+begin_src haskell
type Eval4 alpha = ReaderT Env (ErrorT String (StateT Integer Identity)) alpha

runEval4            ::  Env -> Integer -> Eval4 alpha -> (Either String alpha, Integer)
runEval4 env st ev  =   runIdentity (runStateT (runErrorT (runReaderT ev env)) st)

tick :: (Num s, MonadState s m) => m ()
tick = do  st <- get
           put (st + 1)

eval4             :: Exp -> Eval4 Value
eval4 (Lit i)      = do tick
                        return $ IntVal i
eval4 (Var n)      = do tick
                        env <- ask
                        ...
#+end_src

#+begin_src haskell
runEval4 Map.empty 0 (eval4 exampleExp)
=> (Right (IntVal 18),8) -- 8 reduction steps
#+end_src

# --------------------------------------------------
** add logging

#+begin_src haskell
type Eval5 alpha = ReaderT Env  (ErrorT String (WriterT [String] (StateT Integer Identity))) alpha

runEval5            ::  Env -> Integer -> Eval5 alpha -> ((Either String alpha, [String]), Integer)
runEval5 env st ev  =   runIdentity (runStateT (runWriterT (runErrorT (runReaderT ev env))) st)

eval5             :: Exp -> Eval5 Value
eval5 (Var n)      = do tick
                        tell [n] -- write name vars encountered during eval
                        env <- ask
                        case Map.lookup n env of
                            Nothing  -> throwError ("unbound variable: " ++ n)
                            Just val -> return val
#+end_src

#+begin_src haskell
runEval5 Map.empty 0 (eval5 exampleExp)
=> ((Right (IntVal 18),["x"]),8)
#+end_src

# --------------------------------------------------
** add IO

#+begin_src haskell
type Eval6 alpha = ReaderT Env  (ErrorT String (WriterT [String] (StateT Integer IO))) alpha

runEval6           ::  Env -> Integer -> Eval6 alpha -> IO ((Either String alpha, [String]), Integer)
runEval6 env st ev  =  runStateT (runWriterT (runErrorT (runReaderT ev env))) st

eval6             :: Exp -> Eval6 Value
eval6 (Lit i)      = do tick
                        liftIO $ print i -- print each int encountered
                        return $ IntVal i
#+end_src

#+begin_src haskell
runEval6 Map.empty 0 (eval6 exampleExp)
12
4
2
=> ((Right (IntVal 18),["x"]),8)
#+end_src

# --------------------------------------------------
** final version

#+begin_src haskell
eval6 (Lit i)      = do tick             -- profiling (i.e., state)
                        liftIO $ print i -- print each int encountered
                        return $ IntVal i
eval6 (Var n)      = do tick
                        tell [n]         -- log each var encountered
                        env <- ask       -- consult env
                        case Map.lookup n env of
                          Nothing  -> throwError ("unbound var: " ++ n)
                          Just val -> return val
eval6 (Plus e1 e2) = do tick
                        e1'  <- eval6 e1
                        e2'  <- eval6 e2
                        case (e1', e2') of
                          (IntVal i1, IntVal i2)
                            -> return $ IntVal (i1 + i2)
                          _ -> throwError "type error in addition"
eval6 (Abs n e)    = do tick
                        env <- ask
                        return $ FunVal env n e
eval6 (App e1 e2)  = do tick
                        val1  <- eval6 e1
                        val2  <- eval6 e2
                        case val1 of
                          FunVal env' n body
                            -> local (const (Map.insert n val2 env'))
                                     (eval6 body)
                          _ -> throwError "type error in application"
#+end_src

# End of file.
